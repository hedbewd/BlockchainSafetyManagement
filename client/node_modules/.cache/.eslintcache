[{"D:\\BlockchainSafetyManagement\\client\\src\\index.js":"1","D:\\BlockchainSafetyManagement\\client\\src\\App.jsx":"2","D:\\BlockchainSafetyManagement\\client\\src\\components\\FileUpload.js":"3"},{"size":265,"mtime":1657170204734,"results":"4","hashOfConfig":"5"},{"size":6115,"mtime":1658128014348,"results":"6","hashOfConfig":"5"},{"size":2843,"mtime":1657260466623,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q0esf",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\BlockchainSafetyManagement\\client\\src\\index.js",[],"D:\\BlockchainSafetyManagement\\client\\src\\App.jsx",["15","16","17","18","19"],"import React, { useEffect, useState } from \"react\";\r\nimport {FileUpload} from './components/FileUpload';\r\nimport \"./App.css\";\r\nimport TransactionContract from \"../src/contracts/Transaction.json\"\r\nimport Web3 from 'web3';\r\nimport moment from \"moment\";\r\nimport Axios from 'axios';\r\n\r\n\r\n\r\nexport default function App() {\r\n  const [fileUrl, setFileUrl] = useState(\"\");\r\n  const [web3, setWeb3] = useState(\"\");\r\n  const [account, setAccount] = useState(\"\");\r\n  const [transactionInstance, setTransactionInstance] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [category, setCategory] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [ipfsHash, setIpfsHash] = useState(\"\");\r\n  const [registrant, setRegsitrant] = useState(\"\");\r\n  const [responsibleManager, setResponsibleManager] = useState(\"\");\r\n  const [fileType, setFileType] = useState(\"\");\r\n  const [fileDescription, setFileDescription] = useState(\"\");\r\n  const [transactionCnt, setTransactionCnt] = useState(\"\");\r\n\r\n  const [time, setTime] = useState(\"\");\r\n  const [ipfsHash_, setIpfsHash_] = useState(\"\");\r\n  const [category_, setCategory_] = useState(\"\");\r\n  const [name_, setName_] = useState(\"\");\r\n  const [registrant_, setRegsitrant_] = useState(\"\");\r\n  const [responsibleManager_, setResponsibleManager_] = useState(\"\");\r\n  const [fileType_, setFileType_] = useState(\"\");\r\n  const [fileDescription_, setFileDescription_] = useState(\"\");\r\n\r\n  const submitReview = ()=>{\r\n    Axios.post('http://localhost:3001/api/insert', {\r\n      category: category,\r\n      name: name,\r\n      time: time,\r\n      ipfsHash: ipfsHash,\r\n      registrant: registrant,\r\n      responsible: responsibleManager,\r\n      filetype: fileType,\r\n      filedes: fileDescription\r\n    }).then(()=>{\r\n      alert('등록 완료!');\r\n    })\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    async function componentWillMount(e) {\r\n      const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n      setWeb3(web3);\r\n      console.log(web3)\r\n      const contract = require(\"truffle-contract\");\r\n      const transaction = contract(TransactionContract);\r\n      console.log(web3);\r\n      transaction.setProvider(web3.currentProvider);\r\n  \r\n      web3.eth.getAccounts((error, accounts) => {\r\n        if (!error){\r\n          transaction.deployed().then(instance => {\r\n            setTransactionInstance(instance);\r\n            setAccount(accounts[0]);\r\n            setLoading(true);\r\n          })\r\n        }\r\n      })\r\n      \r\n    }\r\n\r\n    componentWillMount();\r\n    // setTimeout(() => {  console.log(\"World!\"); }, 1000);\r\n    // updateAllTransactions();\r\n\r\n    \r\n\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    async function updateAllTransactions(e){\r\n      let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock:0, toBlock:'latest'});\r\n      for(let i=0; i<events.length; i+=1){\r\n        const record = {};\r\n        var time_ = moment.unix(events[i].returnValues.time);\r\n\r\n        setCategory_(events[i].returnValues.category.toString());\r\n        setName_(events[i].returnValues.name.toString());\r\n        setTime(time_.toString());\r\n        setIpfsHash_(events[i].returnValues.ipfs_hash.toString());\r\n        setRegsitrant_(events[i].returnValues.registrant.toString());\r\n        setResponsibleManager_(events[i].returnValues.responsible_manager.toString());\r\n        setFileType_(events[i].returnValues.file_type.toString());\r\n        setFileDescription_(events[i].returnValues.file_description.toString());\r\n        setTransactionCnt(transactionInstance.cntTransactions());\r\n        console.log(events[i].returnValues);\r\n      }\r\n      console.log(events.length);\r\n      console.log(events);\r\n  \r\n    }\r\n\r\n    if (loading == true) updateAllTransactions();\r\n\r\n}, [loading]);\r\n\r\n\r\n  const sendTransaction = async (e) => {\r\n    // console.log(web3);\r\n    // console.log(account);\r\n    // console.log(transactionInstance);\r\n    await transactionInstance.sendTrans(category, name, ipfsHash, registrant, responsibleManager, fileType, fileDescription,{\r\n      from: account,\r\n      //value: e.web3.utils.toWei('10', \"ether\"),\r\n      gas: 1000000\r\n    })\r\n    \r\n    let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock: 0, toBlock:'latest'});\r\n    console.log(events[events.length-1].transactionHash)\r\n    //this.updateAllTransactions();\r\n\r\n    submitReview();\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" placeholder=\"Type\" onChange = {(event) => setCategory(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Name\" onChange = {(event) => setName(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Registrant\" onChange = {(event) => setRegsitrant(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Responsible Manager\" onChange = {(event) => setResponsibleManager(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"File Type\" onChange = {(event) => setFileType(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"File Description\" onChange = {(event) => setFileDescription(event.target.value)}></input>\r\n      <br></br>\r\n      \r\n      <FileUpload setUrl={setFileUrl} setIpfs={setIpfsHash} />\r\n      FileUrl :{\" \"}\r\n      <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {fileUrl}\r\n      </a>\r\n      <br></br>\r\n\r\n      <p>Your account: {account}</p>\r\n      <br></br>\r\n\r\n      <button onClick={sendTransaction}>\r\n        트랜잭션 추가\r\n      </button>\r\n      {/* <button onClick={updateAllTransactions}>\r\n        트랜잭션 보여주기\r\n      </button> */}\r\n      <br></br>\r\n\r\n      <p>all transactions:</p>\r\n      <br></br>\r\n      <p>Category: {category_}</p>\r\n      <p>File Name: {name_}</p>\r\n      <p>Time: {time}</p>\r\n      <p>IPFS Hash: {ipfsHash_}</p>\r\n      <p>Registrant: {registrant_}</p>\r\n      <p>Responsible Manager: {responsibleManager_}</p>\r\n      <p>File Type: {fileType_}</p>\r\n      <p>File Description: {fileDescription_}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n","D:\\BlockchainSafetyManagement\\client\\src\\components\\FileUpload.js",[],{"ruleId":"20","severity":1,"message":"21","line":13,"column":10,"nodeType":"22","messageId":"23","endLine":13,"endColumn":14},{"ruleId":"20","severity":1,"message":"24","line":25,"column":10,"nodeType":"22","messageId":"23","endLine":25,"endColumn":24},{"ruleId":"20","severity":1,"message":"25","line":88,"column":15,"nodeType":"22","messageId":"23","endLine":88,"endColumn":21},{"ruleId":"26","severity":1,"message":"27","line":107,"column":17,"nodeType":"28","messageId":"29","endLine":107,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":109,"column":4,"nodeType":"32","endLine":109,"endColumn":13,"suggestions":"33"},"no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'transactionCnt' is assigned a value but never used.","'record' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transactionInstance'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTransactionCnt' needs the current value of 'transactionInstance'.","ArrayExpression",["34"],{"desc":"35","fix":"36"},"Update the dependencies array to be: [loading, transactionInstance]",{"range":"37","text":"38"},[3759,3768],"[loading, transactionInstance]"]