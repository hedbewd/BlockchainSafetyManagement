<<<<<<< HEAD
[{"C:\\Users\\mcnl\\Desktop\\gong\\BlockchainSafetyManagement\\client\\src\\index.js":"1","C:\\Users\\mcnl\\Desktop\\gong\\BlockchainSafetyManagement\\client\\src\\App.jsx":"2","C:\\Users\\mcnl\\Desktop\\gong\\BlockchainSafetyManagement\\client\\src\\components\\FileUpload.js":"3"},{"size":265,"mtime":1657517658392,"results":"4","hashOfConfig":"5"},{"size":9997,"mtime":1658121888877,"results":"6","hashOfConfig":"5"},{"size":2843,"mtime":1657517658392,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1xpouwb",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\mcnl\\Desktop\\gong\\BlockchainSafetyManagement\\client\\src\\index.js",[],["16","17"],"C:\\Users\\mcnl\\Desktop\\gong\\BlockchainSafetyManagement\\client\\src\\App.jsx",["18","19","20","21","22"],"import React, { useEffect, useState } from \"react\";\r\nimport {FileUpload} from './components/FileUpload';\r\nimport \"./App.css\";\r\nimport TransactionContract from \"../src/contracts/Transaction.json\"\r\nimport Web3 from 'web3';\r\nimport moment from \"moment\";\r\nimport Axios from 'axios';\r\n\r\n\r\n\r\nexport default function App() {\r\n  const [fileUrl, setFileUrl] = useState(\"\");\r\n  const [web3, setWeb3] = useState(\"\");\r\n  const [account, setAccount] = useState(\"\");\r\n  const [transactionInstance, setTransactionInstance] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [category, setCategory] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [ipfsHash, setIpfsHash] = useState(\"\");\r\n  const [registrant, setRegsitrant] = useState(\"\");\r\n  const [responsibleManager, setResponsibleManager] = useState(\"\");\r\n  const [fileType, setFileType] = useState(\"\");\r\n  const [fileDescription, setFileDescription] = useState(\"\");\r\n  const [transactionCnt, setTransactionCnt] = useState(\"\");\r\n\r\n  const [time, setTime] = useState(\"\");\r\n  const [ipfsHash_, setIpfsHash_] = useState(\"\");\r\n  const [category_, setCategory_] = useState(\"\");\r\n  const [name_, setName_] = useState(\"\");\r\n  const [registrant_, setRegsitrant_] = useState(\"\");\r\n  const [responsibleManager_, setResponsibleManager_] = useState(\"\");\r\n  const [fileType_, setFileType_] = useState(\"\");\r\n  const [fileDescription_, setFileDescription_] = useState(\"\");\r\n\r\n  const submitReview = ()=>{\r\n    Axios.post('http://localhost:3001/api/insert', {\r\n      category: category_,\r\n      name: name_,\r\n      time: time,\r\n      ipfsHash: ipfsHash_,\r\n      registrant: registrant_,\r\n      responsible: responsibleManager_,\r\n      filetype: fileType_,\r\n      filedes: fileDescription_\r\n    }).then(()=>{\r\n      alert('등록 완료!');\r\n    })\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    async function componentWillMount(e) {\r\n      const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n      setWeb3(web3);\r\n      console.log(web3)\r\n      const contract = require(\"truffle-contract\");\r\n      const transaction = contract(TransactionContract);\r\n      console.log(web3);\r\n      transaction.setProvider(web3.currentProvider);\r\n  \r\n      web3.eth.getAccounts((error, accounts) => {\r\n        if (!error){\r\n          transaction.deployed().then(instance => {\r\n            setTransactionInstance(instance);\r\n            setAccount(accounts[0]);\r\n            setLoading(true);\r\n          })\r\n        }\r\n      })\r\n      \r\n    }\r\n\r\n    componentWillMount();\r\n    // setTimeout(() => {  console.log(\"World!\"); }, 1000);\r\n    // updateAllTransactions();\r\n\r\n    \r\n\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    async function updateAllTransactions(e){\r\n      let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock:0, toBlock:'latest'});\r\n      for(let i=0; i<events.length;i+=1){\r\n        const record = {};\r\n        var time_ = moment.unix(events[i].returnValues.time);\r\n\r\n        setCategory_(events[i].returnValues.category.toString());\r\n        setName_(events[i].returnValues.name.toString());\r\n        setTime(time_.toString());\r\n        setIpfsHash_(events[i].returnValues.ipfs_hash.toString());\r\n        setRegsitrant_(events[i].returnValues.registrant.toString());\r\n        setResponsibleManager_(events[i].returnValues.responsible_manager.toString());\r\n        setFileType_(events[i].returnValues.file_type.toString());\r\n        setFileDescription_(events[i].returnValues.file_description.toString());\r\n        setTransactionCnt(transactionInstance.cntTransactions());\r\n        console.log(events[i].returnValues);\r\n      }\r\n      console.log(events.length);\r\n      console.log(events);\r\n  \r\n    }\r\n\r\n    if (loading == true) updateAllTransactions();\r\n\r\n}, [loading]);\r\n\r\n\r\n  const sendTransaction = async (e) => {\r\n    // console.log(web3);\r\n    // console.log(account);\r\n    // console.log(transactionInstance);\r\n    await transactionInstance.sendTrans(category, name, ipfsHash, registrant, responsibleManager, fileType, fileDescription,{\r\n      from: account,\r\n      //value: e.web3.utils.toWei('10', \"ether\"),\r\n      gas: 1000000\r\n    })\r\n    \r\n    let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock: 0, toBlock:'latest'});\r\n    console.log(events[events.length-1].transactionHash)\r\n    //this.updateAllTransactions();\r\n\r\n    submitReview();\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" placeholder=\"Type\" onChange = {(event) => setCategory(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Name\" onChange = {(event) => setName(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Registrant\" onChange = {(event) => setRegsitrant(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Responsible Manager\" onChange = {(event) => setResponsibleManager(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"File Type\" onChange = {(event) => setFileType(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"File Description\" onChange = {(event) => setFileDescription(event.target.value)}></input>\r\n      <br></br>\r\n      \r\n      <FileUpload setUrl={setFileUrl} setIpfs={setIpfsHash} />\r\n      FileUrl :{\" \"}\r\n      <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {fileUrl}\r\n      </a>\r\n      <br></br>\r\n\r\n      <p>Your account: {account}</p>\r\n      <br></br>\r\n\r\n      <button onClick={sendTransaction}>\r\n        트랜잭션 추가\r\n      </button>\r\n      {/* <button onClick={updateAllTransactions}>\r\n        트랜잭션 보여주기\r\n      </button> */}\r\n      <br></br>\r\n\r\n      <p>all transactions:</p>\r\n      <br></br>\r\n      <p>Category: {category_}</p>\r\n      <p>File Name: {name_}</p>\r\n      <p>Time: {time}</p>\r\n      <p>IPFS Hash: {ipfsHash_}</p>\r\n      <p>Registrant: {registrant_}</p>\r\n      <p>Responsible Manager: {responsibleManager_}</p>\r\n      <p>File Type: {fileType_}</p>\r\n      <p>File Description: {fileDescription_}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState, Component } from \"react\";\r\n// import {FileUpload} from './components/FileUpload';\r\n// import \"./App.css\";\r\n// import TransactionContract from \"../src/contracts/Transaction.json\"\r\n// import Web3 from 'web3';\r\n\r\n// const fileComponent = () => {\r\n//   const [fileUrl, setFileUrl] = useState(\"\");\r\n\r\n//   return (\r\n//       <div>\r\n//         <FileUpload setUrl={setFileUrl} />\r\n//         FileUrl :{\" \"}\r\n//         <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//           {fileUrl}\r\n//         </a>\r\n//         <br></br>\r\n//       </div>\r\n//   )\r\n// }\r\n\r\n\r\n\r\n\r\n// class App extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//     this.state = {\r\n//       web3: null,\r\n//       account: null,\r\n//       transactionInstance: null,\r\n\r\n//       ttype: null,\r\n//       name: null,\r\n//       timestamp: null,\r\n//       ipfs_hash: null,\r\n//       registrant: null,\r\n//       responsible_manager: null,\r\n//       file_type: null,\r\n//       file_description: null\r\n//     };\r\n//   }\r\n\r\n//   async componentWillMount() {\r\n//     const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n//     this.setState({\r\n//       web3: web3\r\n//     }, () => {\r\n//       this.instantiateContract();\r\n//     })\r\n//     console.log(web3)\r\n//   }\r\n\r\n//   async instantiateContract(){\r\n//     const contract = require(\"truffle-contract\");\r\n//     const transaction = contract(TransactionContract);\r\n//     console.log(this.state.web3);\r\n//     transaction.setProvider(this.state.web3.currentProvider);\r\n\r\n//     this.state.web3.eth.getAccounts((error, accounts) => {\r\n//       if (!error){\r\n//         transaction.deployed().then(instance => {\r\n//           this.setState({transactionInstance: instance, account: accounts[0]});\r\n//           //this.updateAllTransactions();\r\n//         })\r\n//       }\r\n//     })\r\n//   }\r\n\r\n//   async sendTransaction() {\r\n//     await this.state.transactionInstance.sendTrans({\r\n//       from: this.state.account,\r\n//       value: this.state.web3.utils.toWei('10', \"ether\"),\r\n//       gas: 1000000\r\n//     })\r\n//     //this.updateAllTransactions();\r\n//   }\r\n\r\n// async updateAllTransactions() {\r\n//   await this.state.transactionInstance.getAllTransactions().then(result => {\r\n//     this.setState ({ttype: result})\r\n//     console.log(this.state.ttype);\r\n//   })\r\n// }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <input type=\"text\" placeholder=\"Type\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"Name\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"Time\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"IPFS Hash\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"Registrant\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"Responsible Manager\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"File Type\"></input>\r\n//         <br></br>\r\n//         <input type=\"text\" placeholder=\"File Description\"></input>\r\n//         <br></br>\r\n        \r\n//         {/* <FileUpload setUrl='{setFileUrl}' />\r\n//         FileUrl :{\" \"}\r\n//         <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//           {fileUrl}\r\n//         </a>\r\n//         <br></br> */}\r\n\r\n//         <p>Your account: {this.state.account}</p>\r\n//         <br></br>\r\n\r\n//         <button onClick={() => this.sendTransaction()}>\r\n//           트랜잭션 추가\r\n//         </button>\r\n//         <button onClick={() => this.updateAllTransactions()}>\r\n//           트랜잭션 보여주기\r\n//         </button>\r\n//         <br></br>\r\n\r\n//         <p>all transactions:</p>\r\n//         <br></br>\r\n//         <p>{this.state.ttype}</p>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// export default App;","C:\\Users\\mcnl\\Desktop\\gong\\BlockchainSafetyManagement\\client\\src\\components\\FileUpload.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":13,"column":10,"nodeType":"29","messageId":"30","endLine":13,"endColumn":14},{"ruleId":"27","severity":1,"message":"31","line":25,"column":10,"nodeType":"29","messageId":"30","endLine":25,"endColumn":24},{"ruleId":"27","severity":1,"message":"32","line":88,"column":15,"nodeType":"29","messageId":"30","endLine":88,"endColumn":21},{"ruleId":"33","severity":1,"message":"34","line":107,"column":17,"nodeType":"35","messageId":"36","endLine":107,"endColumn":19},{"ruleId":"37","severity":1,"message":"38","line":109,"column":4,"nodeType":"39","endLine":109,"endColumn":13,"suggestions":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'transactionCnt' is assigned a value but never used.","'record' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transactionInstance'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTransactionCnt' needs the current value of 'transactionInstance'.","ArrayExpression",["43"],"no-global-assign","no-unsafe-negation",{"desc":"44","fix":"45"},"Update the dependencies array to be: [loading, transactionInstance]",{"range":"46","text":"47"},[3765,3774],"[loading, transactionInstance]"]
=======
[{"D:\\BlockchainSafetyManagement\\client\\src\\index.js":"1","D:\\BlockchainSafetyManagement\\client\\src\\App.jsx":"2","D:\\BlockchainSafetyManagement\\client\\src\\components\\FileUpload.js":"3"},{"size":265,"mtime":1657170204734,"results":"4","hashOfConfig":"5"},{"size":5610,"mtime":1658126263683,"results":"6","hashOfConfig":"5"},{"size":2843,"mtime":1657260466623,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"q0esf",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"D:\\BlockchainSafetyManagement\\client\\src\\index.js",[],["15","16"],"D:\\BlockchainSafetyManagement\\client\\src\\App.jsx",["17","18","19","20","21"],"D:\\BlockchainSafetyManagement\\client\\src\\components\\FileUpload.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":11,"column":10,"nodeType":"28","messageId":"29","endLine":11,"endColumn":14},{"ruleId":"26","severity":1,"message":"30","line":23,"column":10,"nodeType":"28","messageId":"29","endLine":23,"endColumn":24},{"ruleId":"26","severity":1,"message":"31","line":71,"column":15,"nodeType":"28","messageId":"29","endLine":71,"endColumn":21},{"ruleId":"32","severity":1,"message":"33","line":90,"column":17,"nodeType":"34","messageId":"35","endLine":90,"endColumn":19},{"ruleId":"36","severity":1,"message":"37","line":92,"column":4,"nodeType":"38","endLine":92,"endColumn":13,"suggestions":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'web3' is assigned a value but never used.","Identifier","unusedVar","'transactionCnt' is assigned a value but never used.","'record' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'transactionInstance'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTransactionCnt' needs the current value of 'transactionInstance'.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [loading, transactionInstance]",{"range":"45","text":"46"},[3322,3331],"[loading, transactionInstance]"]
>>>>>>> 345c6bb1d3b835aaed5d714a3409d560ece21e40
